---
title: "Patient Data Visualiser"
output: 
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
source("global.R")
```


Patients
=================

Inputs {.sidebar}
--------------------------------------------------------


```{r sidebar}

h3("Population select")

radioButtons("gender",
             label = "Gender:",
             choices = c("All", "Male", "Female"),
             selected = "All")


sliderInput(inputId = "ageslider",
            label = "Select age group:",
            min = min(minmax_age),
            max = max(minmax_age),
            value = minmax_age,
            dragRange = TRUE)


actionButton(inputId = "popselect", label = "Select")


h3("Settings")

radioButtons(inputId = "censory", label = "Censoring Y-var:", choices = c("persons", "percentage"), selected = "persons")


data_pop <-eventReactive(input$popselect,{
  d1 <- population %>% 
    filter(between(diagnosed_age_yrs, input$ageslider[1], input$ageslider[2])) # filter by age
  # filter by gender
  if(input$gender != "All"){
    d1 <- d1 %>%
      filter(gender == input$gender)
  }
  # if n > 9 ok, else whole population
  if(nrow(d1) > 9) {
    return(d1)
  }else{
    return(population)
  }
  
})

data_censored_info <- eventReactive(input$popselect, {
  data_pop() %>% 
    group_by(survived, censored) %>% 
    summarise(persons = n()) %>% 
    group_by(censored) %>% 
    mutate(persons = cumsum(persons),
           percentage = 100 * persons / nrow(population),
           censored = factor(censored, levels = c(0,1), labels = c("Died", "Censored")) ) %>% 
    select(survived, censored, persons, percentage) -> data_pop_censored
})

gender_color <- eventReactive(input$popselect, {
        ## Color codes for bars
        bar_colors <- c("dodgerblue3", "orchid2")
        if(input$gender == "Female") bar_colors <- c("orchid2")
        if(input$gender == "Male") bar_colors <- c("dodgerblue3")
        return(bar_colors)
})
```



Row {.tabset}
-----------------------------------------------------------------------

### Population

```{r populationGraphPlotly}
renderPlotly({ 
      d1 <- data_pop() %>% 
        group_by(diagnosed_age_yrs, gender) %>% 
        summarise(n=n())
      
      p <- ggplot(d1) +
        geom_bar(aes(x=diagnosed_age_yrs, y=n, fill=gender), stat="identity") +
        labs(title = paste0("Population (n=", nrow(data_pop()),")" ), 
             caption = "", x="", y="") + 
        scale_fill_manual(values=gender_color()) + theme(legend.position="none")
      
      ggplotly(p, source="pop")
    })
```


### Mortality

```{r mortalityPlot}
renderPlotly({
  d1 <- data_pop() %>% 
    group_by(survived_yrs_cat, gender) %>%
    summarise(n=n())
  # mortality after diagnose
  ggplot(d1) +
    geom_bar(stat = "identity", aes(x=survived_yrs_cat, y=n, fill=gender)) + 
    coord_flip() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
    labs(title = "Mortality, days after the diagnose", x= "", y="", fill="") +
    scale_fill_manual(values=gender_color())
})
```

### Censoring Timeline

```{r}
renderPlotly({
  if (input$censory == "persons") ylab = "persons" 
  if (input$censory == "percentage") ylab = "percentage" 
  
  ggplot(data = data_censored_info()) +
    geom_area(colour = "black", 
              aes(x=survived, y = get(input$censory), fill = censored, group = censored), 
              position = "identity", 
              alpha =.4,
              size = .2) +
    scale_fill_brewer(palette = "Dark2") +
    labs(x = "days survived", y = ylab, fill = "" )
})
```



Row 
-----------------------------------------------------------------------


### Descriptives: Summary

```{r}
renderPrint({
  summary(data_pop()[, c("gender", "diagnosed_age", "survived", "censored")])
})
```


### Descriptives: Age when diagnosed

```{r}
renderPlotly({
  ggplot(data = data_pop()) +
  geom_boxplot(aes(x=gender , diagnosed_age), 
               outlier.shape = 16, 
               outlier.colour = "red", 
               notch = FALSE, 
               outlier.size = 2) +
  labs(x = "", y = "")
  
})

```





Hilmo
============

Inputs {.sidebar}
--------------------------------------------------------

```{r}
h3("Settings")
radioButtons(inputId = "hilmox", label = "X-var:", choices = c("persons", "cases", "hospitalized"), selected = "hospitalized")
radioButtons(inputId = "hilmoy", label = "Y-var:", choices = c("persons", "cases", "hospitalized"), selected = "persons")


data_hilmo_general <- eventReactive(input$popselect, {
  
  s <- unique(event_data("plotly_click", source = "timeline_graph")$x)
  
  ## TODO precalculate this and then filter by id list?
  if(is.null(s)){
    hilmo_agg1 %>% 
      filter(id %in% data_pop()$id) %>% 
      group_by(pdgo) %>% 
      summarise(persons = length(unique(id)),
                cases = n(),
                hospitalized = sum(days))
  }else{
    hilmo_agg1 %>% 
      filter(id %in% data_pop()$id) %>% 
      filter( (laht_yr > s-1 & laht_yr <= s)| (tulo_yr < s & tulo_yr > s-1) ) %>% 
      group_by(pdgo) %>% 
      summarise(persons = length(unique(id)),
                cases = n(),
                hospitalized = sum(days))
  }
  

})

data_hilmo_timeline <- eventReactive(input$popselect, {
  # TODO
  hilmo_tl #%>% 
          # mutate(
          #   patients_percentage = round(100 * patients / nrow(data_pop()), 2)
          # )
})

```


Row 
-----------------------------------------------------------------------

### Descriptives: Hilmo diagnoses

```{r}
renderPlotly({ 
  if(input$hilmox == "persons") xlab <- "persons"
  if(input$hilmox == "cases") xlab <- "cases"
  if(input$hilmox == "hospitalized") xlab <- "hospitalized"
  if(input$hilmoy == "persons") ylab <- "persons"
  if(input$hilmoy == "cases") ylab <- "cases"
  if(input$hilmoy == "hospitalized") ylab <- "hospitalized"
  
  s <- unique(event_data("plotly_click", source = "timeline_graph")$x)

  ## Plot differs by selected years
  if(is.null(s)){
    title <- paste0("Most common diagnoses in whole timeline")
    ggplot(data = data_hilmo_general(), aes(x = get(input$hilmox), y = get(input$hilmoy))) +
      geom_text(aes(label = pdgo)) +
      labs(x = xlab, y = ylab)
  }else{
      title <- paste0("Most common diagnoses in ", s)
    ggplot(data = data_hilmo_general(), aes(x = get(input$hilmox), y = get(input$hilmoy))) +
      geom_text(aes(label = pdgo)) +
      labs(x = xlab, y = ylab)
  }
  

})
```


### Other

```{r}
renderPrint({
  unique(event_data("plotly_click", source = "timeline_graph")$x)
})
```



Row {.tabset}
-----------------------------------------------------------------------

### Timeline

```{r plotly_timeline}
renderPlotly({
  p <- ggplot(data = data_hilmo_timeline()) +
    geom_bar(aes(x = time, y = hospital_days, group = ICD, fill = ICD), stat= "identity")
  p
  ggplotly(p, source="timeline_graph")
})
```

